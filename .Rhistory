# bibd_out_12[i,] <- c(out$tau.unadj, sqrt(out$var.unadj.wb), sqrt(out$var.unadj.bb),
# out$tau.fixed, sqrt(out$var.fixed.wb), sqrt(out$var.fixed.bb))
# IBD.nsim <- quietly(with(group, ibd_an(Y, blk_id, assign, g = c(1,-1,0)),data = group))
# IBD.mat[i,] <- c(IBD.nsim$tau.g,sqrt(IBD.nsim$var.tau.g1),sqrt(IBD.nsim$var.tau.g2))
}
mean(apply(CI_ht,1,diff))
mean(apply(CI_haj,1,diff))
CI_ht2 <- matrix(nrow = nsims,ncol = 2)
CI_haj2 <- CI_ht2
for (i in 1:nsims) {
# IBD #
#Randomize block assignments
assign <- c(rep(3,38),rep(2,33))
assign <- cbind(1,assign[sample(1:71)])
assign <- data.frame(assign)
names(assign) <- c("r1", "r2")
assign$school_id <- unique(class_sum1_temp$g1schid)
#Function to drop schools with certain treatments
group_1 <- class_sum1_temp %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = assign[which(assign$school_id==.y$g1schid), c(1,2)],
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
group_2<- class_sum1_temp2 %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = matrix(rep(c(1,2),4),ncol = 2),
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
group <- rbind(group_1,group_2)
K <- length(unique(group$blk_id))
block_sizes <- group %>%
count(blk_id, name = "block_size")
N <- nrow(group)
nk <- block_sizes$block_size
out <- quietly(IBDInfer(y =Y, b = blk_id, z = assign, g = c(1,-1,0), w = nk/N,data = group))
# out$CI_haj_bb
CI_ht2[i,] <- out$CI_ht_bb
CI_haj2[i,] <- out$CI_haj_bb
}
mean(apply(CI_ht2,1,diff))
mean(apply(CI_haj2,1,diff))
out
# source("~/Library/CloudStorage/Dropbox/Incomplete block designs/R code/helpers2.R")
source("/Users/taehyeon/Documents/GitHub/IBDInfer/R/IBDInfer.R")
CI_ht2 <- matrix(nrow = nsims,ncol = 2)
CI_haj2 <- CI_ht2
for (i in 1:nsims) {
# IBD #
#Randomize block assignments
assign <- c(rep(3,38),rep(2,33))
assign <- cbind(1,assign[sample(1:71)])
assign <- data.frame(assign)
names(assign) <- c("r1", "r2")
assign$school_id <- unique(class_sum1_temp$g1schid)
#Function to drop schools with certain treatments
group_1 <- class_sum1_temp %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = assign[which(assign$school_id==.y$g1schid), c(1,2)],
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
group_2<- class_sum1_temp2 %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = matrix(rep(c(1,2),4),ncol = 2),
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
group <- rbind(group_1,group_2)
K <- length(unique(group$blk_id))
block_sizes <- group %>%
count(blk_id, name = "block_size")
N <- nrow(group)
nk <- block_sizes$block_size
out <- quietly(IBDInfer(y =Y, b = blk_id, z = assign, g = c(1,-1,0), w = nk/N,data = group))
# out$CI_haj_bb
CI_ht2[i,] <- out$CI_ht_bb
CI_haj2[i,] <- out$CI_haj_bb
}
mean(apply(CI_ht2,1,diff))
mean(apply(CI_haj2,1,diff))
#Reduce to schools (blocks) with at least 2 classes assigned to all treatments
large_schools <- assignment_schools1a$g1schid[which(assignment_schools1a$"1">1 & assignment_schools1a$"2">1 & assignment_schools1a$"3">1)]
class_sum1l <- class_sum1[which(class_sum1$g1schid %in% large_schools),]
#Need to get minimum classes in a treatment group for each school
large1_table <- data.frame(table(class_sum1l$g1schid, class_sum1l$type))
names(large1_table ) <- c("g1schid", "type", "Freq")
num_trt_block <- large1_table %>% group_by(g1schid) %>%
summarize(num_trt = min(Freq))
class_sum1l$num_trt <- num_trt_block$num_trt[match(class_sum1l$g1schid, num_trt_block$g1schid)]
CI_haj_bb <- CI_ht_bb <-  matrix(nrow = nsims,ncol = 2)
CI_haj_wb <- CI_ht_wb <-  matrix(nrow = nsims,ncol = 2)
for (i in 1:nsims) {
drop_school <- sample(unique(class_sum1l$g1schid), 1)
class_sum1l_temp <- class_sum1l[-which(class_sum1l$g1schid==drop_school),]
#Randomly assign block treatments
assignl <- matrix(c(rep(c(1,2), 5), rep(c(1,3), 5), rep(c(2,3), 5)), byrow=T, ncol=2)
assignl <- assignl[sample(1:15),]
assignl <- data.frame(assignl)
names(assignl) <- c("r1", "r2")
assignl$school_id <- unique(class_sum1l_temp$g1schid)
#Function to drop schools with certain treatments
group_1l <- class_sum1l_temp %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = assignl[which(assignl$school_id==.y$g1schid), c(1,2)],
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
K <- length(unique(group_1l$blk_id))
block_sizes <- group_1l %>%
count(blk_id, name = "block_size")
N <- nrow(group_1l)
nk <- block_sizes$block_size
out <- quietly(IBDInfer(y =Y, b = blk_id, z = assign, g = c(1,-1,0), w = nk/N,data = group_1l))
# out$CI_haj_bb
CI_ht_bb[i,] <- out$CI_ht_bb
CI_haj_bb[i,] <- out$CI_haj_bb
CI_ht_wb[i,] <- out$CI_ht_wb
CI_haj_wb[i,] <- out$CI_haj_wb
}
mean(apply(CI_ht_bb,1,diff))
mean(apply(CI_haj_bb,1,diff))
mean(apply(CI_ht_wb,1,diff))
mean(apply(CI_haj_wb,1,diff))
CI_haj_wb
CI_haj_bb
CI_ht_wb
CI_haj_bb2 <- CI_ht_bb2 <-  matrix(nrow = nsims,ncol = 2)
CI_haj_wb2 <- CI_ht_wb2 <-  matrix(nrow = nsims,ncol = 2)
for (i in 1:nsims) {
# drop_school <- sample(unique(class_sum1l$g1schid), 1)
# class_sum1l_temp <- class_sum1l[-which(class_sum1l$g1schid==drop_school),]
#Randomly assign block treatments
assign <- c(rep(2,8),rep(3,8))
assignl <-cbind(1,assign[sample(1:16)])
assignl <- data.frame(assignl)
names(assignl) <- c("r1", "r2")
assignl$school_id <- unique(class_sum1l$g1schid)
#Function to drop schools with certain treatments
group_1l <- class_sum1l %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = assignl[which(assignl$school_id==.y$g1schid), c(1,2)],
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
K <- length(unique(group_1l$blk_id))
block_sizes <- group_1l %>%
count(blk_id, name = "block_size")
N <- nrow(group_1l)
nk <- block_sizes$block_size
out <- quietly(IBDInfer(y =Y, b = blk_id, z = assign, g = c(1,-1,0), w = nk/N,data = group_1l))
# out$CI_haj_bb
CI_ht_bb2[i,] <- out$CI_ht_bb
CI_haj_bb2[i,] <- out$CI_haj_bb
CI_ht_wb2[i,] <- out$CI_ht_wb
CI_haj_wb2[i,] <- out$CI_haj_wb
}
mean(apply(CI_ht_bb,1,diff))
mean(apply(CI_haj_bb,1,diff))
mean(apply(CI_ht_wb,1,diff))
mean(apply(CI_haj_wb,1,diff))
mean(apply(CI_ht_bb2,1,diff))
mean(apply(CI_haj_bb2,1,diff))
mean(apply(CI_ht_wb2,1,diff))
mean(apply(CI_haj_wb2,1,diff))
mean(apply(CI_ht,1,diff))
mean(apply(CI_haj,1,diff))
mean(apply(CI_ht2,1,diff))
mean(apply(CI_haj2,1,diff))
CI_ht <- matrix(nrow = nsims,ncol = 2)
CI_haj <- CI_ht
for (i in 1:nsims) {
# BIBD #
#Randomize block assignments
assign <- matrix(c(rep(c(1,2), 21), rep(c(1,3), 25), rep(c(2,3), 25)), byrow=T, ncol=2)
assign <- assign[sample(1:71),]
assign <- data.frame(assign)
names(assign) <- c("r1", "r2")
assign$school_id <- unique(class_sum1_temp$g1schid)
#Function to drop schools with certain treatments
group_1 <- class_sum1_temp %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = assign[which(assign$school_id==.y$g1schid), c(1,2)],
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
group_2<- class_sum1_temp2 %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = matrix(rep(c(1,2),4),ncol = 2),
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
group <- rbind(group_1,group_2)
K <- length(unique(group$blk_id))
block_sizes <- group %>%
count(blk_id, name = "block_size")
N <- nrow(group)
nk <- block_sizes$block_size
out <- quietly(IBDInfer(y =Y, b = blk_id, z = assign, g = c(1,-1,0), w = nk/N,data = group))
# out$CI_haj_bb
CI_ht[i,] <- out$CI_ht_bb
CI_haj[i,] <- out$CI_haj_bb
# out <- quietly(with(group, id(Y.obs = Y, blk_id = blk_id, assign = assign, trt1 = 1, trt2 = 2)))
# bibd_out_12[i,] <- c(out$tau.unadj, sqrt(out$var.unadj.wb), sqrt(out$var.unadj.bb),
# out$tau.fixed, sqrt(out$var.fixed.wb), sqrt(out$var.fixed.bb))
# IBD.nsim <- quietly(with(group, ibd_an(Y, blk_id, assign, g = c(1,-1,0)),data = group))
# IBD.mat[i,] <- c(IBD.nsim$tau.g,sqrt(IBD.nsim$var.tau.g1),sqrt(IBD.nsim$var.tau.g2))
}
mean(apply(CI_ht,1,diff))
mean(apply(CI_haj,1,diff))
mean(apply(CI_ht2,1,diff))
mean(apply(CI_haj2,1,diff))
mean(apply(CI_ht2,1,diff))
mean(apply(CI_haj2,1,diff))
ggplot(data = data.frame(CI_ht2), aes(x = X1)) +
geom_histogram(binwidth = 0.1, fill = "blue", alpha = 0.5) +
geom_vline(xintercept = mean(apply(CI_ht2,1,diff)), color = "red", size = 1) +
ggtitle("Histogram of HT estimator for IBD") +
theme_minimal()
data.frame(CI_ht2)
ggplot(df = data.frame(CI_ht2)) +
geom_point() +  # Points
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1, color = "red") +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
data.frame(CI_ht2)
df_ht2 <- data.frame(CI_ht2)
head(df_ht2)
ggplot(df_ht2) +
geom_point() +  # Points
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1, color = "red") +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
ggplot(df_ht2) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1, color = "red") +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_ht2 <- data.frame(x = 1:nsims,CI_ht2)
ggplot(df_ht2, aes(x = x)) +
geom_point() +  # Points
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1, color = "red") +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
ggplot(df_ht2, aes(x = x)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1, color = "red") +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_ht2 <- data.frame(x = 1:nsims,CI_ht2)
df_haj2 <- data.frame(x = 1:nsims,CI_haj2)
df_ht2$method = 'HT'
df_haj2$method = 'Haj'
df <- rbind(df_ht2,df_haj2)
# head(df_ht2)
ggplot(df, aes(x = x,color = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1, color = "red") +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
# head(df_ht2)
ggplot(df, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1, color = "red") +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
# head(df_ht2)
ggplot(df, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_ht <- data.frame(x = 1:nsims,CI_ht)
df_haj <- data.frame(x = 1:nsims,CI_haj)
df_ht$method = 'HT'
df_haj$method = 'Haj'
df <- rbind(df_ht,df_haj)
# head(df_ht2)
ggplot(df, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df <- rbind(df_ht_bb,df_haj_bb,df_ht_wb,df_haj_wb)
df_ht_bb <- data.frame(x = 1:nsims,CI_ht_bb)
df_haj_bb <- data.frame(x = 1:nsims,CI_haj_bb)
df_ht_wb <- data.frame(x = 1:nsims,CI_ht_wb)
df_haj_wb <- data.frame(x = 1:nsims,CI_haj_wb)
df_ht_bb$method = 'HT_bb'
df_haj_bb$method = 'Haj_bb'
df_ht_wb$method = 'HT_wb'
df_haj_wb$method = 'Haj_wb'
df <- rbind(df_ht_bb,df_haj_bb,df_ht_wb,df_haj_wb)
# head(df_ht2)
ggplot(df, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_bb <- rbind(df_ht_bb,df_haj_bb)
# head(df_ht2)
ggplot(df_bb, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_wb <- rbind(df_ht_wb,df_haj_wb)
# head(df_ht2)
ggplot(df_wb, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_ht_bb2 <- data.frame(x = 1:nsims,CI_ht_bb2)
df_haj_bb2 <- data.frame(x = 1:nsims,CI_haj_bb2)
df_ht_wb2 <- data.frame(x = 1:nsims,CI_ht_wb2)
df_haj_wb2 <- data.frame(x = 1:nsims,CI_haj_wb2)
df_ht_bb2$method = 'HT_bb'
df_haj_bb2$method = 'Haj_bb'
df_ht_wb2$method = 'HT_wb'
df_haj_wb2$method = 'Haj_wb'
df_bb2 <- rbind(df_ht_bb2,df_haj_bb2)
# head(df_ht2)
ggplot(df_bb2, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_wb2 <- rbind(df_ht_wb2,df_haj_wb2)
# head(df_ht2)
ggplot(df_wb, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_only_haj <- rbind(df_haj_bb2,df_haj_wb2)
ggplot(df_only_haj, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval with Error Bars", x = "X", y = "Y") +
theme_minimal()
df_ht <- data.frame(x = 1:nsims,CI_ht)
df_haj <- data.frame(x = 1:nsims,CI_haj)
df_ht$method = 'HT'
df_haj$method = 'Haj'
df <- rbind(df_ht,df_haj)
# head(df_ht2)
ggplot(df, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval from BIBDs with all blocks", x = "X", y = "Y") +
theme_minimal()
df_ht2 <- data.frame(x = 1:nsims,CI_ht2)
df_haj2 <- data.frame(x = 1:nsims,CI_haj2)
df_ht2$method = 'HT'
df_haj2$method = 'Haj'
df <- rbind(df_ht2,df_haj2)
# head(df_ht2)
ggplot(df, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval from IBDs with all blocks", x = "X", y = "Y") +
theme_minimal()
df_ht_bb <- data.frame(x = 1:nsims,CI_ht_bb)
df_haj_bb <- data.frame(x = 1:nsims,CI_haj_bb)
df_ht_wb <- data.frame(x = 1:nsims,CI_ht_wb)
df_haj_wb <- data.frame(x = 1:nsims,CI_haj_wb)
df_ht_bb$method = 'HT_bb'
df_haj_bb$method = 'Haj_bb'
df_ht_wb$method = 'HT_wb'
df_haj_wb$method = 'Haj_wb'
df_bb <- rbind(df_ht_bb,df_haj_bb)
# head(df_ht2)
ggplot(df_bb, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval from BIBDs with big blocks (BB)", x = "X", y = "Y") +
theme_minimal()
df_wb <- rbind(df_ht_wb,df_haj_wb)
# head(df_ht2)
ggplot(df_wb, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval from BIBDs with big blocks (WB)", x = "X", y = "Y") +
theme_minimal()
df_ht_bb2 <- data.frame(x = 1:nsims,CI_ht_bb2)
df_haj_bb2 <- data.frame(x = 1:nsims,CI_haj_bb2)
df_ht_wb2 <- data.frame(x = 1:nsims,CI_ht_wb2)
df_haj_wb2 <- data.frame(x = 1:nsims,CI_haj_wb2)
df_ht_bb2$method = 'HT_bb'
df_haj_bb2$method = 'Haj_bb'
df_ht_wb2$method = 'HT_wb'
df_haj_wb2$method = 'Haj_wb'
df_bb2 <- rbind(df_ht_bb2,df_haj_bb2)
# head(df_ht2)
ggplot(df_bb2, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval from IBDs with big blocks (BB)", x = "X", y = "Y") +
theme_minimal()
df_wb2 <- rbind(df_ht_wb2,df_haj_wb2)
# head(df_ht2)
ggplot(df_wb, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval from BIBDs with big blocks (WB)", x = "X", y = "Y") +
theme_minimal()
# head(df_ht2)
ggplot(df_wb, aes(x = x,colour = method)) +
geom_errorbar(aes(ymin = X1, ymax = X2), width = 0.1) +  # Error bars
labs(title = "Confidence Interval from IBDs with big blocks (WB)", x = "X", y = "Y") +
theme_minimal()
install.packages(c("devtools", "roxygen2", "usethis"))
devtools::check()
devtools::build()
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_git()
usethis::use_github()
usethis::use_git()
devtools::build()
library(haven)
library(dplyr)
library(tidyr)
library(clintools)
setwd("~/Dropbox/Incomplete block designs/Data example/STAR")
#Read in data
STAR_K_3_Schools <- read_sav("PROJECT STAR/STAR_K-3_Schools.sav")
STAR_Students <- read_sav("PROJECT STAR/STAR_Students.sav")
STAR_High_Schools <- read_sav("PROJECT STAR/STAR_High_Schools.sav")
STAR_Students_orig <- STAR_Students
STAR_Students$g1SAT <- (STAR_Students$g1treadss + STAR_Students$g1tmathss+STAR_Students$g1tlistss + STAR_Students$g1wordskillss)/4
STAR_Students <- STAR_Students[!is.na(STAR_Students$g1SAT),]
classes_by_schools1 <- STAR_Students %>% group_by(g1tchid, g1schid) %>%
summarise(type = mean(g1classtype))
assignment_schools1 <-classes_by_schools1 %>% group_by(g1schid, type) %>%
summarise(N = n())
assignment_schools1a <- assignment_schools1 %>% pivot_wider(names_from = type, values_from = N)
length(which(assignment_schools1a$"1">1 & assignment_schools1a$"2">1 & assignment_schools1a$"3">1))
##Use first grade class assignment, summarize by school (blocking factor), teacher (unit), the assignment, and the average test score (removing NA)
class_sum1 <- STAR_Students %>% group_by(g1tchid, g1schid) %>%
summarise(type = mean(g1classtype), test_mean = mean(g1SAT, na.rm=T))
#Reduce to schools (blocks) with at least 2 classes assigned to all treatments
large_schools <- assignment_schools1a$g1schid[which(assignment_schools1a$"1">1 & assignment_schools1a$"2">1 & assignment_schools1a$"3">1)]
class_sum1l <- class_sum1[which(class_sum1$g1schid %in% large_schools),]
all1_table <- data.frame(table(class_sum1$g1schid, class_sum1$type))
names(all1_table ) <- c("g1schid", "type", "Freq")
num_trt_block <- all1_table %>% group_by(g1schid) %>%
summarize(num_trt = min(Freq))
######
data.sum <- class_sum1 %>%
group_by(g1schid) %>%
summarise(t = length(unique(type)), n.vec = length(test_mean), R_k = list(unique(type)))
# class_sum1[class_sum1$g1tchid==128076,]
# sapply(data.sum$R_k,function(x){which(length(x)==2)})
# after dropping NA = 75
# nsims <- 500
set.seed(08854)
idx2 <- which(sapply(sapply(data.sum$R_k,function(x){which(length(x)<3)}),function(e) is.element('1', e)))
sch.id2 <- unique(class_sum1$g1schid)[idx2]
class_sum1_temp <- class_sum1[-which(class_sum1$g1schid %in% sch.id2),]
class_sum1_temp2 <- class_sum1[which(class_sum1$g1schid %in% sch.id2),]
all1_table <- data.frame(table(class_sum1_temp$g1schid, class_sum1_temp$type))
notall_table <- data.frame(table(class_sum1_temp2$g1schid, class_sum1_temp2$type))
names(all1_table) <- names(notall_table) <- c("g1schid", "type", "Freq")
num_trt_block <- all1_table %>% group_by(g1schid) %>%
summarize(num_trt = min(Freq))
num_trt_block2 <- notall_table %>% group_by(g1schid) %>%
summarize(num_trt = min(Freq))
class_sum1_temp$num_trt <- num_trt_block$num_trt[match(class_sum1_temp$g1schid, num_trt_block$g1schid)]
class_sum1_temp2$num_trt <- num_trt_block2$num_trt[match(class_sum1_temp2$g1schid, num_trt_block2$g1schid)]
IBD.mat <- data.frame(matrix(nrow = 0,ncol = 3))
bibd_out_12 <- bibd_outl_12 <- data.frame(matrix(ncol = 6, nrow = 0))
nsims <- 500
drop_trt <- function(Y, assign_orig, assign_left, blk_id, num_trt){
num_trt <- num_trt[1]
assign_new <- assign_orig[assign_orig %in% assign_left]
Y_new <- Y[which(assign_orig %in% assign_left)]
if(sum(assign_new%in%assign_left[1]) !=num_trt|sum(assign_new%in%assign_left[2]) !=num_trt){
assign1 <- which(assign_new%in%assign_left[1])
assign2 <- which(assign_new%in%assign_left[2])
remain1 <- assign1[sample(1:length(assign1), num_trt)]
remain2 <- assign2[sample(1:length(assign2), num_trt)]
assign_new <- c(assign_new[remain1], assign_new[remain2])
Y_new <- c(Y_new[remain1], Y_new[remain2])
}
blk_id_ret <- rep(blk_id, length(assign_new))
return(list(Y = Y_new, assign = assign_new, blk_id = blk_id_ret))
}
CI_ht <- matrix(nrow = nsims,ncol = 2)
CI_haj <- CI_ht
# BIBD #
#Randomize block assignments
assign <- matrix(c(rep(c(1,2), 21), rep(c(1,3), 25), rep(c(2,3), 25)), byrow=T, ncol=2)
assign <- assign[sample(1:71),]
assign <- data.frame(assign)
names(assign) <- c("r1", "r2")
assign$school_id <- unique(class_sum1_temp$g1schid)
#Function to drop schools with certain treatments
group_1 <- class_sum1_temp %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = assign[which(assign$school_id==.y$g1schid), c(1,2)],
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
group_2<- class_sum1_temp2 %>% group_by(g1schid) %>%
group_map(~drop_trt(Y=.x$test_mean, assign_orig=.x$type,
assign_left = matrix(rep(c(1,2),4),ncol = 2),
blk_id=.y$g1schid, num_trt=.x$num_trt)) %>%
bind_rows()
group <- rbind(group_1,group_2)
K <- length(unique(group$blk_id))
block_sizes <- group %>%
count(blk_id, name = "block_size")
N <- nrow(group)
nk <- block_sizes$block_size
out <- quietly(IBDInfer(y =Y, b = blk_id, z = assign, g = c(1,-1,0), w = 'unit',data = group))
out <- quietly(IBDInfer(y =Y, b = blk_id, z = assign, g = c(1,-1,0), w = 'Unit',data = group))
out
summary(out)
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
install.packages("~/Documents/GitHub/IBDInfer_0.0.1.tar.gz", repos = NULL, type = "source")
library(IBDInfer)
K <- 6
n.trt <- 3
t <- 2
n.vec <- rep(4, K)
df <- IBDgen(K = K, n.trt = n.trt, t = t, n.vec = n.vec)$blk_assign
df
df$y <- rnorm(nrow(df), 0, 1)
IBDInfer <- IBDInfer(y = y, b = blk_id, z = assign, g = c(1, -1, 0), w = "Block", data = df)
IBDInfer
summary(IBDInfer)
